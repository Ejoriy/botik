from aiogram import F, Router, Bot
from aiogram.enums import ContentType
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery
from aiogram.exceptions import TelegramAPIError

import app.keyboards as kb
import app.database.requests as rq
import app.database.models as mods
from app.database.models import async_session
from app.database.requests import create_new_key
from decouple import config
from datetime import datetime, timedelta
from sqlalchemy import select
from config import botik

router = Router()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def cmd_start(message: Message):
    user_id = message.from_user.id
    channel_link = '@persecvpn'  # –í–∞—à –∫–∞–Ω–∞–ª

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª
        member = await botik.get_chat_member(channel_link, user_id)

        if member.status in ['member', 'administrator', 'creator']:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            await rq.set_user(user_id)
            await message.answer(
                '–ü—Ä–∏–≤–µ—Ç üëãüèª\n\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ª–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–º—É VPN-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—é, '
                '–∫–æ—Ç–æ—Ä–æ–µ –æ–±–µ—Å–ø–µ—á–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —Å–≤–æ–±–æ–¥—É –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ. –í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ, —Å–ª–µ–¥—É–π –ø–æ–¥—Å–∫–∞–∑–∫–∞–º –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏ '
                '—Å–≤–æ–π –ª–∏—á–Ω—ã–π VPN-–∫–ª—é—á.',
                reply_markup=kb.main
            )
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª
            await message.answer(
                '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: \n\n –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /start',
                reply_markup=kb.checker
            )
    except TelegramAPIError as e:
        # –û—à–∏–±–∫–∞ —Å API Telegram (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)
        await message.answer(
            f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ API: {str(e)}\n\n–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞, —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É')
    except Exception as e:
        # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
        await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
@router.message(Command('help'))
async def get_help(message: Message):
    await message.answer('–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:\n/help - –ø–æ–º–æ—â—å\n/start - –Ω–∞—á–∞—Ç—å',
                         reply_markup=kb.helper)


# –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ
@router.callback_query(F.data == 'lk')
async def lk(callback: CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.full_name

    if not await rq.check_subscription(user_id, callback):
        return

    async with async_session() as session:
        result = await session.scalar(select(mods.User.sub).where(mods.User.tg_id == user_id))
        end_sub = await session.scalar(select(mods.User.end_time).where(mods.User.tg_id == user_id))

    end_sub_str = end_sub.strftime("%d\\.%m\\.%Y %H:%M") if end_sub else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    await callback.answer()
    await callback.message.edit_text(
        f'–ü—Ä–∏–≤–µ—Ç, {username}\n\nID: {user_id}\n\n*–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:* {result}\n\n*–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:* {end_sub_str}',
        parse_mode="MarkdownV2",
        reply_markup=kb.back
    )


# –ü–æ–∫—É–ø–∫–∞ VPN
@router.callback_query(F.data == 'buy')
async def buy(callback: CallbackQuery):
    user_id = callback.from_user.id

    if not await rq.check_subscription(user_id, callback):
        return

    await callback.answer()
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏:', reply_markup=kb.forpay)


# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –∫ VPN
@router.callback_query(F.data == 'instruction')
async def instruction(callback: CallbackQuery):
    user_id = callback.from_user.id

    if not await rq.check_subscription(user_id, callback):
        return

    await callback.answer()
    await callback.message.edit_text(
        '*–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –≤—ã–ø–æ–ª–Ω–∏—Ç–µ 3 –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–∞:*\n\n1Ô∏è‚É£ _–°–∫–∞—á–∞–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:_'
        '\n\n[Android](https://play.google.com/store/apps/details?id=org.outline.android.client)'
        '\n\n[IOS](https://apps.apple.com/ru/app/outline-app/id1356177741)\n\n2Ô∏è‚É£ _–°–∫–æ–ø–∏—Ä—É–π –≤—ã–¥–∞–Ω–Ω—ã–π –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –∫–ª—é—á_\n\n'
        '3Ô∏è‚É£ _–ó–∞–π–¥–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:_\n\n–≤—Å—Ç–∞–≤—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –≤ –ø–æ—è–≤–∏–≤—à–µ–µ—Å—è –ø–æ–ª–µ –≤–≤–æ–¥–∞, –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–∂–º–∏ _"–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"_ '
        '–∏ —Ä–∞–∑—Ä–µ—à–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n\n"–ï—Å–ª–∏ –≤–¥—Ä—É–≥ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–ª—é—á–∞ –Ω–µ –ø–æ—è–≤–∏—Ç—Å—è, –Ω–∞–∂–º–∏ –Ω–∞ ‚úö –≤ –ø—Ä–∞–≤–æ–º '
        '–≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É"\n\n\n*–ü–æ–∑–¥—Ä–∞–≤–ª—è—é ü•≥, –≤—Å–µ –≥–æ—Ç–æ–≤–æ*\\!',
        reply_markup=kb.back,
        parse_mode="MarkdownV2",
        disable_web_page_preview=True
    )


@router.callback_query(F.data == 'go_back')
async def back_to_menu(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text(
        '–ü—Ä–∏–≤–µ—Ç üëãüèª\n\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ª–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–º—É VPN-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—é, '
        '–∫–æ—Ç–æ—Ä–æ–µ –æ–±–µ—Å–ø–µ—á–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —Å–≤–æ–±–æ–¥—É –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ. –í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ, —Å–ª–µ–¥—É–π –ø–æ–¥—Å–∫–∞–∑–∫–∞–º –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏ —Å–≤–æ–π –ª–∏—á–Ω—ã–π VPN-–∫–ª—é—á.',
        reply_markup=kb.main
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
@router.callback_query(F.data == 'support')
async def support(callback: CallbackQuery):
    user_id = callback.from_user.id

    if not await rq.check_subscription(user_id, callback):
        return

    await callback.answer()
    await callback.message.edit_text(
        '–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –∏—Ö –Ω–∞–º:\n\n@ejoriy\n@Jnbehdb',
        reply_markup=kb.back
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –º–µ—Å—è—Ü
@router.callback_query(F.data == 'monthly')
async def process_monthly_payment(callback: CallbackQuery, bot: Bot):
    user_id = callback.from_user.id

    if not await rq.check_subscription(user_id, callback):
        return

    await callback.answer()
    await bot.send_invoice(
        chat_id=callback.from_user.id,
        title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü",
        description="–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –º–µ—Å—è—Ü 150 —Ä—É–±–ª–µ–π",
        payload="monthly_subscription",
        provider_token=config('PAYMENT_TOKEN'),
        currency="RUB",
        prices=[LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü", amount=150 * 100)],  # 150 —Ä—É–±–ª–µ–π –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        start_parameter="monthly_subscription",
    )


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π
@router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery, bot: Bot):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
@router.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
async def process_successful_payment(message: Message):
    await message.answer('‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ ‚úÖ\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.')

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è VPN-–∫–ª—é—á–∞
    access_url, key_id = await create_new_key()

    # –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    payment_date = datetime.now()
    end_date = payment_date + timedelta(minutes=2)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –∫–ª—é—á–∞
    await rq.update_subscription(message.from_user.id, "–ú–µ—Å—è—Ü", payment_date, end_date)
    await rq.set_user_key(message.from_user.id, access_url, key_id)

    await message.answer(access_url)
    await message.answer(
        'üîë `–≠—Ç–æ –≤–∞—à VPN-–∫–ª—é—á` üîë\n\n–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞–∑–¥–µ–ª "üìî –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"',
        parse_mode='MarkdownV2',
        reply_markup=kb.back
    )


# –≤–≤–µ–¥–µ–º –∫–æ–≥–¥–∞ —Ä–∞—Å–∫—Ä—É—Ç–∏–º—Å—è

@router.callback_query(F.data == 'annual')
async def support(callback: CallbackQuery):
    await callback.answer()
